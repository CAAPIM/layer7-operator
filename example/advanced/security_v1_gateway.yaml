apiVersion: security.brcmlabs.com/v1
kind: Gateway
metadata:
  name: ssg
spec:
  version: "10.1.00_CR2"
  license:
    accept: true
    secretName: gateway-license
  app:
    annotations:
      sidecar.opentelemetry.io/inject: "ssg"
    replicas: 2
    image: docker.io/caapim/gateway:10.1.00_CR3
    imagePullSecrets:
    - name: harbor-reg-cred
    imagePullPolicy: Always
    serviceAccountName: ssg-serviceaccount
    updateStrategy:
      type: rollingUpdate
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 2
    resources:
      requests: {}
        # memory: 4Gi
        # cpu: 2
      limits: {}
        # memory: 4Gi
        # cpu: 2
    # monitoring:
    #   enabled: true
    #   otel:
    #     collector:
    #       create: false
      # serviceMonitor:
      #   create: false
    autoscaling:
      enabled: false
      hpa:
        minReplicas: 2
        maxReplicas: 3
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 300
            policies:
            - type: Pods
              value: 1
              periodSeconds: 60
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
            - type: Percent
              value: 100
              periodSeconds: 15
    bundle: []
      # - type: graphman
      #   source: secret
      #   name: gateway-graphman-bootstrap-secret
      # - type: graphman
      #   source: secret
      #   name: gateway-graphman-bootstrap-secret1
    repositoryReferences:
      - name: graphman-infra
        enabled: false
        directories:
        - cacMyFramework
        - gateway
        type: dynamic
        encryption:
         # passphrase: 7layer
          existingSecret: gateway-secret
          key: GRAPHMAN_INFRA_ENCRYPTION_PASSPHRASE
        notification:
          enabled: false
          channel:
          # Message Format is currently set for Slack.
            webhook: {}
             # url:
             # insecureSkipVerify: false
              #headers:
              #  Authorization: Bearer 123456789
              # auth:
              #   type: basic
              #   username: test
              #   password: test123
      - name: graphman-static
        enabled: true
        type: static
    bootstrap:
      script:
        enabled: true
    initContainers:
    - name: gateway-init
      image: harbor.sutraone.com/operator/gateway-init:1.0.3
      imagePullPolicy: Always
      volumeMounts:
      - name: config-directory
        mountPath: /opt/docker/custom
    hazelcast:
      external: false
      endpoint: hazelcast.example.com:5701
    management:
      secretName: gateway-secret
      #username: admin
      #password: 7layer
      # Management port requires a separate service...
      service:
        enabled: false
        #annotations:
          # cloud.google.com/load-balancer-type: "Internal"
        type: ClusterIP
        ports:
        - name: management
          port: 9443
          targetPort: 9443
          protocol: TCP   
      restman:
        enabled: false
      ## Reserved for future use
      graphman:
        enabled: true
        initContainerImage: docker.io/layer7api/graphman-static-init:1.0.0
      cluster:
        #password: "mypassword"
        hostname: "gateway.brcmlabs.com"
      database:
        enabled: false # this runs the gateway in dbbacked/ephemeral mode
      #  jdbcUrl: "jdbc:mysql://cluster1-haproxy.pxc.svc.cluster.local:3306/ssg"
      #  username: "gateway"
      #  password: "ACm8BDr3Rfk2Flx9V"
    java:
      jvmHeap:
        calculate: true
        percentage: 50
        default: 2g
      extraArgs:
      - -Dcom.l7tech.bootstrap.autoTrustSslKey=trustAnchor,TrustedFor.SSL,TrustedFor.SAML_ISSUER
      - -Dcom.l7tech.server.audit.message.saveToInternal=false
      - -Dcom.l7tech.server.audit.admin.saveToInternal=false
      - -Dcom.l7tech.server.audit.system.saveToInternal=false
      - -Dcom.l7tech.server.audit.log.format=json
      - -Djava.util.logging.config.file=/opt/SecureSpan/Gateway/node/default/etc/conf/log-override.properties
      - -Dcom.l7tech.server.pkix.useDefaultTrustAnchors=true 
      - -Dcom.l7tech.security.ssl.hostAllowWildcard=true
      - -Dcom.l7tech.bootstrap.graphmanBundles.groupByFolder=true
      - -javaagent:/opt/SecureSpan/Gateway/runtime/lib/otel/opentelemetry-javaagent-1.21.0.jar
    listenPorts:
      harden: false
      custom:
        enabled: true
      ports:
      - name: Default HTTPS (8443)
        port: "8443"
        enabled: true
        protocol: HTTPS
        managementFeatures:
        - Published service message input
        # - Administrative access
        # - Browser-based administration
        # - Built-in services
        properties:
        - name: server
          value: A
        tls:
          enabled: true
          #privateKey: 00000000000000000000000000000002:ssl
          clientAuthentication: Optional
          versions:
          - TLSv1.2
          - TLSv1.3
          useCipherSuitesOrder: true
          cipherSuites:
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
          - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
          - TLS_DHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
          - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
          - TLS_DHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_AES_256_GCM_SHA384
          - TLS_AES_128_GCM_SHA256
      - name: Default HTTPS (9443)
        port: "9443"
        enabled: true
        protocol: HTTPS
        managementFeatures:
        - Published service message input
        - Administrative access
        - Browser-based administration
        - Built-in services
        properties: []
        # - name: server
        #   value: B
        tls:
          enabled: true
        # privateKey: 00000000000000000000000000000002:ssl
          clientAuthentication: Optional
          versions:
          - TLSv1.2
          - TLSv1.3
          useCipherSuitesOrder: true
          cipherSuites:
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
          - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
          - TLS_DHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
          - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
          - TLS_DHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_AES_256_GCM_SHA384
          - TLS_AES_128_GCM_SHA256
      - name: Default HTTP (8080)
        port: "8080"
        enabled: false
        protocol: HTTP
        managementFeatures:
        - Published service message input
        # - Administrative access
        # - Browser-based administration
        # - Built-in services
        tls:
          enabled: false
    cwp:
      enabled: true
      properties:
        - name: io.httpsHostAllowWildcard
          value: "true"
        - name: log.levels
          value: |
            com.l7tech.level = CONFIG
            com.l7tech.server.policy.variable.ServerVariables.level = SEVERE
            com.l7tech.external.assertions.odata.server.producer.jdbc.GenerateSqlQuery.level = SEVERE
            com.l7tech.server.policy.assertion.ServerSetVariableAssertion.level = SEVERE
            com.l7tech.external.assertions.comparison.server.ServerComparisonAssertion = SEVERE
        - name: audit.setDetailLevel.FINE
          value: 152 7101 7103 9648 9645 7026 7027 4155 150 4716 4114 6306 4100 9655 150 151 11000 4104
    system:
      properties: |-
        # Default Gateway system properties
        # Configuration properties for shared state extensions.
        com.l7tech.server.extension.sharedKeyValueStoreProvider=embeddedhazelcast
        com.l7tech.server.extension.sharedCounterProvider=ssgdb
        com.l7tech.server.extension.sharedClusterInfoProvider=ssgdb
        # By default, FIPS module will block an RSA modulus from being used for encryption if it has been used for
        # signing, or visa-versa. Set true to disable this default behaviour and remain backwards compatible.
        com.safelogic.cryptocomply.rsa.allow_multi_use=true
        # Specifies the type of Trust Store (JKS/PKCS12) provided by AdoptOpenJDK that is used by Gateway.
        # Must be set correctly when Gateway is running in FIPS mode. If not specified it will default to PKCS12.
        javax.net.ssl.trustStoreType=jks
        com.l7tech.server.clusterStaleNodeCleanupTimeoutSeconds=86400
        # Additional properties go here
    service:
      # annotations:
      type: ClusterIP
      ports:
      - name: https
        port: 8443
        targetPort: 8443
        protocol: TCP
      - name: management
        port: 9443
        targetPort: 9443
        protocol: TCP
      - name: monitoring
        port: 8889
        targetPort: 8889
        protocol: TCP
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      tls:
      - hosts: 
        - gateway.brcmlabs.com
        secretName: brcmlabs
      - hosts:
        - test.example.com
        secretName: default
      rules:
      - host: gateway.brcmlabs.com
      - host: test.example.com