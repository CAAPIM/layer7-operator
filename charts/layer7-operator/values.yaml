## @section Common Parameters
## @param nameOverride String to partially override fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override fullname
##
fullnameOverride: ""

## @param clusterDomain Kubernetes cluster domain name
##
clusterDomain: cluster.local


## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param podLabels Labels to add to the Layer7 Operator Pod
##
podLabels: {}
## @param podAnnotations Annotations to add to the Layer7 Operator Pod
##
podAnnotations: {}


## @section RBAC Parameters
## ServiceAccount configuration
##
serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  ##
  name: ""

rbac:
  ## @param rbac.create Specifies whether RBAC resources should be created
  ##
  create: true


## @section Layer7 Operator Parameters

## @param managedNamespaces Namespaces that the Operator will manage. By default it will watch all namespaces.
##
managedNamespaces:
- ""

## @param replicas Number of Layer7 Operator replicas. This value should not be changed\
##
replicas: 1

## Webhook configuration
##
webhook:
  ## @param webhook.enabled This creates Validating and Mutating Webhook configurations
  ##
  enabled: true
  tls:
  ## @param webhook.tls.certmanager.enabled This creates a self-signed issuer and cert-manager certificate, cert-manager is required if this is true
  ## @param webhook.tls.existingTlsSecret This allows you use an existing secret of type kubernetes.io/tls
  ##
    certmanager:
      enabled: true
    existingTlsSecret: webhook-cert-secret

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext Layer7 Operator Pod Security Context
podSecurityContext: {}

## Configure Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param containerSecurityContext Layer7 Operator Container Security Context
containerSecurityContext: {}

## Layer7 Operator Image
## @param image.registry [default: docker.io] Layer7 Operator image registry
## @param image.repository [default: caapim/layer7-operator] Layer7 Operator image repository
## @param image.tag Layer7 Operator image tag
## @param image.pullPolicy Layer7 Operator image pull policy
## @param image.pullSecrets Layer7 Operator image pull secrets
##
image:
  registry: docker.io
  repository: caapim/layer7-operator
  tag: v1.1.1
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

## Layer7 Operator resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## @param resources.limits.cpu The cpu limits for the Layer7 Operator container
## @param resources.limits.memory The memory limits for the Layer7 Operator container
## @param resources.requests.cpu The cpu requests for the Layer7 Operator container
 ## @param resources.requests.memory The memory requests for Layer7 Operator container
##
resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 64Mi

## Layer7 Operator args
## @param args The arguments to pass to the Layer7 Operator Container. Setting --zap-log-level=10 will increase log verbosity
##
args:
- --health-probe-bind-address=:8081
- --metrics-bind-address=:8443
- --leader-elect
- --zap-log-level=info
- --zap-time-encoding=rfc3339nano

## Layer7 Operator OTel Configuration
## OTel
##
otel:
  ## @param otel.enabled [default: false] Enable OpenTelemetry Metrics for the Layer7 Operator
  ## @param otel.otlpEndpoint [default: localhost:4317] OTel Collector GRPC endpoint
  ## @param otel.metricPrefix [default: layer7_] OTel metric prefix that will be prepended to each metric emitted from the Layer7 Operator
  enabled: false
  otlpEndpoint: localhost:4317
  metricPrefix: layer7_

## @section Proxy Configuration
## Proxy Configuration
## @param proxy.httpProxy HTTP proxy
## @param proxy.httpsProxy HTTPS proxy
## @param proxy.noProxy Proxy exclusion
## @param proxy.caBundle.enabled Mount a configmap to the Layer7 Operator Container with a Trusted CA bundle
## @param proxy.caBundle.existingConfigmap Existing configmap containing a ca bundle
## @param proxy.caBundle.create Create the ca bundle

## @param proxy.caBundle.key Existing configmap key that has the ca-bundle. Set this if you are specifying your own configmap or if you are using a label to inject a trusted ca bundle into the configMap this Chart creates.

## @param proxy.caBundle.labels Labels to add to the created ca bundle
## @param proxy.caBundle.annotations to add the created ca bundle
## @param proxy.caBundle.pem optional even when create is true given that certain labels will automatically inject the ca contents.
##
proxy:
  httpProxy:
  httpsProxy:
  noProxy:
  caBundle:
    enabled: false
    existingConfigmap:
    key:
    create: false
    labels: {}
    annotations: {}
    pem:
    # pem: |+
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
