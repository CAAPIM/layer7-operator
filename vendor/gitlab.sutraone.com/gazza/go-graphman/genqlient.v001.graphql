query everything {
    policyFragments {
        name
        checksum
        folderPath
        policy {
            xml
        }
        guid
    }
    webApiServices {
        name
        checksum
        resolutionPath
        folderPath
        policy {
            xml
        }
        enabled
        methodsAllowed
    }
    soapServices {
        name
        checksum
        folderPath
        resolvers {
            resolutionPath
        }
        wsdl
        wssProcessingEnabled
        enabled
        methodsAllowed
        policy {
          xml
        }
    }
    clusterProperties {
        name
        checksum
        value
    }
    trustedCerts {
        name
        checksum
        certBase64
        verifyHostname
        trustAnchor
        trustedFor
        revocationCheckPolicyType
    }
    encassConfigs {
        name
        checksum
        policyName
        guid
        encassArgs {
            name
            type
            ordinal
            guiLabel
            guiPrompt
        }
        encassResults {
            name
            type
        }
    }
    jdbcConnections {
        name
        checksum
        driverClass
        jdbcUrl
        enabled
        username
        password
        minPoolSize
        maxPoolSize
        properties {
            name
            value
        }
    }
    schemas {
        systemId
        checksum
        targetNs
        description
        content
    }
    dtds {
        systemId
        checksum
        publicId
        description
        content
    }
    fips {
        name
        checksum
        goid
        enableCredentialTypeX509
        enableCredentialTypeSaml
        certificateReferences {
            thumbprintSha1
        }
    }
    ldapIdps {
        name
        goid
        ldapUrls
        ldapsClientAuthEnabled
        ldapsClientKeyAlias
        searchBase
        writable
        bindDn
        bindPassword
        userMappings {
            objClass
            nameAttrName
            loginAttrName
            passwdAttrName
            firstNameAttrName
            lastNameAttrName
            emailNameAttrName
            kerberosAttrName
            kerberosEnterpriseAttrName
            userCertAttrName
            passwdType {
                val
            }
        }
        groupMappings {
            objClass
            nameAttrName
            memberAttrName
            memberStrategy {
                val
            }
        }
        checksum
    }
    internalGroups {
        name
        checksum
        goid
        description
    }
    fipGroups {
        name
        providerName
        checksum
        goid
        description
    }
    internalUsers {
        name
        goid
        checksum
        memberOf {
            name
        }
        login
        password
        firstName
        lastName
        email
        certBase64
    }
    fipUsers {
        name
        providerName
        checksum
        goid
        subjectDn
        memberOf {
            name
        }
        login
        firstName
        lastName
        email
        certBase64
    }
    keys {
        alias
        checksum
        goid
        p12
    }
    secrets {
        name
        secretType
        checksum
        goid
        variableReferencable
        secret
        description
    }
    cassandraConnections {
        goid
        name
        keyspace
        contactPoints
        port
        username
        securePassword
        sslEnabled
        cipherSuites
        properties {
            name
            value
        }
        checksum
    }
    jmsDestinations {
       name
       direction
       providerType
       initialContextFactoryClassname
       connectionFactoryName
       jndiUrl
       jndiUsername
       jndiPassword
       template
       enabled
       jndiSslDetails {
           sslEnabled
           sslForAuthenticationOnly
           sslVerifyServerCertificate
           sslVerifyServerHostname
           sslClientKeyAlias
       }
       destinationType
       destinationName
       destinationUsername
       destinationPassword
       destinationSslDetails {
           sslEnabled
           sslForAuthenticationOnly
           sslVerifyServerCertificate
           sslVerifyServerHostname
           sslClientKeyAlias
       }
       template
       enabled
       properties {
           name
           value
       }
       checksum
    }
    globalPolicies {
       name
       tag
       folderPath
       policy {
           xml
       }
       guid
       goid
       checksum
    }
    backgroundTaskPolicies {
       name
       folderPath
       guid
       policy {
           xml
       }
       checksum
   }
   scheduledTasks {
       name
       policyName
       jobType
       cronExpression
       executeOnSingleNode
       executeOnCreation
       executionDate
       status
       runAsUser
       runAsUserProviderName
       checksum
   }
}


mutation applyBundle ($clusterProperties: [ClusterPropertyInput!]!=[],
        $webApiServices: [WebApiServiceInput!]!=[],
        $encassConfigs:[EncassConfigInput!]!=[],
        $trustedCerts:[TrustedCertInput!]!=[],
        $dtds:[DtdInput!]!=[],
        $schemas:[SchemaInput!]!=[],
        $jdbcConnections:[JdbcConnectionInput!]!=[],
        $soapServices:[SoapServiceInput!]!=[],
        $policyFragments: [PolicyFragmentInput!]!=[],
        $fips:[CreateFipInput!]!=[],
        $ldapIdps:[CreateLdapInput!]!=[],
        $fipGroups:[CreateFipGroupInput!]!=[],
        $internalGroups:[CreateInternalGroupInput!]!=[],
        $fipUsers:[CreateFipUserInput!]!=[],
        $internalUsers:[CreateInternalUserInput!]!=[],
        $keys: [KeyInput!]!=[],
        $secrets: [SecretInput!]!=[],
        $cassandraConnections:[CassandraConnectionInput!]!=[],
        $jmsDestinations:[JmsDestinationInput!]!=[],
        $globalPolicies:[GlobalPolicyInput!]!=[],
        $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],
        $scheduledTasks:[ScheduledTaskInput!]!=[]) {
    setClusterProperties (input: $clusterProperties){clusterProperties {goid}}
    setTrustedCerts (input: $trustedCerts){trustedCerts {goid}}
    setSchemas (input: $schemas){schemas {goid}}
    setDtds (input: $dtds){dtds {goid}}
    setJdbcConnections (input: $jdbcConnections){jdbcConnections {goid}}
    setFips (input: $fips){fips{goid}}
    setLdapIdps (input: $ldapIdps){ldapIdps{goid}}
    setFipGroups (input: $fipGroups){fipGroups{goid}}
    setInternalGroups (input: $internalGroups){internalGroups{goid}}
    setFipUsers (input: $fipUsers){fipUsers{goid}}
    setInternalUsers (input: $internalUsers){internalUsers{goid}}
    setKeys (input: $keys) {keys {alias}}
    setSecrets (input: $secrets){secrets{name}}
    setCassandraConnections (input: $cassandraConnections){cassandraConnections {goid}}
    setJmsDestinations (input: $jmsDestinations){jmsDestinations {goid}}
    setPolicyFragments (input: $policyFragments){policyFragments {goid}}
    setEncassConfigs (input: $encassConfigs){encassConfigs {goid}}
    setGlobalPolicies (input: $globalPolicies){globalPolicies {goid}}
    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){backgroundTaskPolicies {goid}}
    setWebApiServices (input: $webApiServices){webApiServices {goid}}
    setSoapServices (input: $soapServices){soapServices {goid}}
    setScheduledTasks (input: $scheduledTasks){scheduledTasks {goid}}
}